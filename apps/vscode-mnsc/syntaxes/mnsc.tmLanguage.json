{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "scopeName": "source.mnsc",
  "name": "MNSC",
  "patterns": [
    { "include": "#comments" },
    { "include": "#frontMatterFence" },
    { "include": "#ids" },
    { "include": "#labels" },
    { "include": "#items" },
    { "include": "#blockFunction" },
    { "include": "#callFunction" },
    { "include": "#talk" }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.mnsc",
          "match": "//.*$"
        }
      ]
    },
    "frontMatterFence": {
      "patterns": [
        {
          "name": "meta.front-matter.mnsc",
          "begin": "^---$",
          "end": "^---$",
          "patterns": [{ "include": "source.yaml" }]
        }
      ]
    },
    "ids": {
      "patterns": [
        {
          "name": "keyword.label.id.mnsc",
          "match": "^\\s*#id:[A-Za-z0-9_-]+$"
        }
      ]
    },
    "labels": {
      "patterns": [
        {
          "name": "entity.name.label.mnsc",
          "match": "^\\s*\\*[A-Za-z_][A-Za-z0-9_]*\\s*$"
        },
        {
          "name": "meta.label.reference.mnsc",
          "match": "(=>)\\s*(\\*[A-Za-z_][A-Za-z0-9_]*)",
          "captures": {
            "1": { "name": "keyword.operator.choice-dest.mnsc" },
            "2": { "name": "entity.name.label.mnsc" }
          }
        }
      ]
    },
    "callFunction": {
      "patterns": [
        {
          "name": "meta.function.call.set.mnsc",
          "begin": "<<\\s*(set)",
          "beginCaptures": { "1": { "name": "support.function.set.mnsc" } },
          "end": ">>",
          "patterns": [
            { "name": "punctuation.definition.group.begin.mnsc", "match": "\\(" },
            { "name": "punctuation.definition.group.end.mnsc", "match": "\\)" },
            { "name": "punctuation.separator.parameter.mnsc", "match": "," },
            { "name": "punctuation.separator.key-value.mnsc", "match": ":" },
            { "include": "#variables" },
            { "include": "#strings" },
            { "include": "#numbers" },
            { "name": "constant.language.boolean.mnsc", "match": "\\b(?:true|false)\\b" },
            { "name": "keyword.operator.logical.mnsc", "match": "&&|\\|\\|" },
            { "name": "keyword.operator.comparison.mnsc", "match": "==|!=|>=|<=|>|<" }
          ]
        },
        {
          "name": "meta.function.call.mnsc",
          "begin": "<<\\s*([A-Za-z_][A-Za-z0-9_]*)",
          "beginCaptures": {
            "1": { "name": "entity.name.function.mnsc" }
          },
          "end": ">>",
          "patterns": [
            { "name": "punctuation.definition.group.begin.mnsc", "match": "\\(" },
            { "name": "punctuation.definition.group.end.mnsc", "match": "\\)" },
            { "name": "punctuation.separator.parameter.mnsc", "match": "," },
            { "name": "punctuation.separator.key-value.mnsc", "match": ":" },
            { "name": "variable.parameter.mnsc", "match": "[A-Za-z_][A-Za-z0-9_]*(?=\\s*:)" },
            { "include": "#variables" },
            { "include": "#strings" },
            { "include": "#numbers" },
            { "name": "constant.language.boolean.mnsc", "match": "\\b(?:true|false)\\b" },
            { "name": "keyword.operator.logical.mnsc", "match": "&&|\\|\\|" },
            { "name": "keyword.operator.comparison.mnsc", "match": "==|!=|>=|<=|>|<" }
          ]
        }
      ]
    },
    "blockFunction": {
      "patterns": [
        {
          "name": "meta.function.block.mnsc",
          "begin": "^\\s*<<<\\s*(?!/)(choices)\\b|^\\s*<<<\\s*(?!/)([A-Za-z_][A-Za-z0-9_]*)",
          "beginCaptures": {
            "1": { "name": "support.function.choices.mnsc" },
            "2": { "name": "entity.name.function.mnsc" }
          },
          "end": "^\\s*<<</(choices)>>>\\s*$|^\\s*<<</([A-Za-z_][A-Za-z0-9_]*)>>>\\s*$",
          "endCaptures": {
            "1": { "name": "support.function.choices.mnsc" },
            "2": { "name": "entity.name.function.mnsc" }
          },
          "patterns": [
            { "include": "#ids" },
            { "include": "#labels" },
            { "include": "#items" },
            { "name": "variable.parameter.mnsc", "match": "[A-Za-z_][A-Za-z0-9_]*(?=\\s*:)" },
            { "name": "punctuation.definition.group.begin.mnsc", "match": "\\(" },
            { "name": "punctuation.definition.group.end.mnsc", "match": "\\)" },
            { "name": "punctuation.separator.parameter.mnsc", "match": "," },
            { "name": "punctuation.separator.key-value.mnsc", "match": ":" },
            { "include": "#variables" },
            { "include": "#strings" },
            { "include": "#numbers" },
            { "name": "constant.language.boolean.mnsc", "match": "\\b(?:true|false)\\b" }
          ]
        }
      ]
    },
    "items": {
      "patterns": [
        {
          "name": "meta.choice.item.mnsc",
          "begin": "^\\s*(-)\\s",
          "beginCaptures": { "1": { "name": "punctuation.definition.item.mnsc" } },
          "end": "$",
          "patterns": [
            {
              "name": "meta.choice.item.guard.mnsc",
              "begin": "(\\[)\\s*(if)\\s*\\(",
              "beginCaptures": {
                "1": { "name": "punctuation.section.brackets.begin.mnsc" },
                "2": { "name": "keyword.control.if.mnsc" }
              },
              "end": "\\)\\s*(\\])\\s*(:)",
              "endCaptures": {
                "1": { "name": "punctuation.section.brackets.end.mnsc" },
                "2": { "name": "punctuation.separator.key-value.mnsc" }
              },
              "patterns": [
                { "name": "punctuation.definition.group.begin.mnsc", "match": "\\(" },
                { "name": "punctuation.definition.group.end.mnsc", "match": "\\)" },
                { "name": "punctuation.separator.parameter.mnsc", "match": "," },
                { "name": "punctuation.separator.key-value.mnsc", "match": ":" },
                { "include": "#variables" },
                { "include": "#strings" },
                { "include": "#numbers" },
                { "name": "constant.language.boolean.mnsc", "match": "\\b(?:true|false)\\b" },
                { "name": "keyword.operator.logical.mnsc", "match": "&&|\\|\\|" },
                { "name": "keyword.operator.comparison.mnsc", "match": "==|!=|>=|<=|>|<" }
              ]
            },
            { "include": "#labels" }
          ]
        }
      ]
    },
    "talk": {
      "patterns": [
        {
          "name": "meta.talk.line.mnsc",
          "begin": "^\\s*([^:]+):",
          "beginCaptures": {
            "1": { "name": "entity.name.type.speaker.mnsc" }
          },
          "end": "$",
          "patterns": [
            { "name": "variable.parameter.face.mnsc", "match": "\\bface(?=\\s*:)" },
            { "name": "variable.parameter.mnsc", "match": "\\b[A-Za-z_][A-Za-z0-9_]*(?=\\s*:)" },
            { "name": "punctuation.separator.parameter.mnsc", "match": "," },
            { "include": "#variables" },
            { "include": "#strings" },
            { "include": "#numbers" },
            { "name": "constant.language.boolean.mnsc", "match": "\\b(?:true|false)\\b" }
          ]
        }
      ]
    },
    "variables": {
      "patterns": [{ "name": "variable.other.mnsc", "match": "\\$[A-Za-z_][A-Za-z0-9_]*" }]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.single.mnsc",
          "begin": "'",
          "end": "'",
          "patterns": [{ "match": "\\\\.", "name": "constant.character.escape.mnsc" }]
        },
        {
          "name": "string.quoted.double.mnsc",
          "begin": "\"",
          "end": "\"",
          "patterns": [{ "match": "\\\\.", "name": "constant.character.escape.mnsc" }]
        }
      ]
    },
    "numbers": {
      "patterns": [
        { "name": "constant.numeric.float.mnsc", "match": "[+-]?\\d+\\.\\d+" },
        { "name": "constant.numeric.integer.mnsc", "match": "[+-]?\\d+" }
      ]
    }
  }
}
